/*
Exercise 7.14
Определите новый конкретный тип, который соответствует интерфейсу Ехрг и предоставляет новую операцию,
такую как вычисление минимального из значений ее операндов. Поскольку функция Parse не создает экземпляров
этого нового типа, для ее применения вам надо строить синтаксическое дерево непосредственно
(или расширять синтаксический анализатор).

Решение:
Я добавил тип postUnary, который принимает оператор '!', и с использованием math.Gamma считает и возвращает факториал от
значения, которое стоит до оператора '!'. Это потребовало внесения изменений в файл parse.go (parseUnary).
*/

package main

import (
	"fmt"
	"log"

	"GolangBook/chapter7/lesson9/ex7.14/eval"
)

func main() {
	s := "2+2*2"                           // формула в формате строки
	e := eval.Env{"x": 6.876569, "y": 3.0} // среда, со значениями переменных
	expr, err := eval.Parse(s)             // создаем интерфейс Expr, проверяем формулу и помещаем ее в интерфейс
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf("%s = %.2f", s, expr.Eval(e))
}
